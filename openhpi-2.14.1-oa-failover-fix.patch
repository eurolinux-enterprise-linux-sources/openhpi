diff -up openhpi-2.14.1/plugins/oa_soap/oa_soap_calls.c.oa_failover_fix openhpi-2.14.1/plugins/oa_soap/oa_soap_calls.c
--- openhpi-2.14.1/plugins/oa_soap/oa_soap_calls.c.oa_failover_fix	2013-04-03 21:37:20.149639006 +0200
+++ openhpi-2.14.1/plugins/oa_soap/oa_soap_calls.c	2013-04-03 21:54:51.312644098 +0200
@@ -1002,10 +1002,17 @@ void    soap_getEventInfo(xmlNode *event
         char    *str;
         xmlNode *node;
 
+	if(str = soap_tree_value(events, "event"))
         result->event =
-                soap_enum(eventType_S, soap_tree_value(events, "event"));
-        result->eventTimeStamp =
-                atoi(soap_tree_value(events, "eventTimeStamp"));
+                soap_enum(eventType_S, str);
+	else
+        result->event = -1;
+
+	if((str = soap_tree_value(events, "eventTimeStamp")))
+		result->eventTimeStamp = atoi(str);
+	else
+        	result->eventTimeStamp = -1;
+
         if ((str = soap_tree_value(events, "queueSize")))
                 result->queueSize = atoi(str);
         else
diff -up openhpi-2.14.1/plugins/oa_soap/oa_soap_event.c.oa_failover_fix openhpi-2.14.1/plugins/oa_soap/oa_soap_event.c
--- openhpi-2.14.1/plugins/oa_soap/oa_soap_event.c.oa_failover_fix	2009-11-23 21:16:51.000000000 +0100
+++ openhpi-2.14.1/plugins/oa_soap/oa_soap_event.c	2013-04-03 21:54:51.312644098 +0200
@@ -225,6 +225,7 @@ gpointer oa_soap_event_thread(gpointer o
 
         /* Listen for the events from OA */
         while (listen_for_events == SAHPI_TRUE) {
+                request.pid = oa->event_pid;
         	OA_SOAP_CHEK_SHUTDOWN_REQ(oa_handler, NULL, NULL, NULL);
                 rv = soap_getAllEvents(oa->event_con, &request, &response);
                 if (rv == SOAP_OK) {
@@ -613,6 +614,8 @@ void process_oa_events(struct oh_handler
         	OA_SOAP_CHEK_SHUTDOWN_REQ(oa_handler, NULL, NULL, NULL);
                 /* Get the event from eventInfoArray */
                 soap_getEventInfo(response->eventInfoArray, &event);
+		dbg("\nThread id=%p event %d received\n",
+				g_thread_self(), event.event);
                 switch (event.event) {
                         case EVENT_HEARTBEAT:
                                 dbg("HEART BEAT EVENT");
@@ -1047,7 +1050,8 @@ void process_oa_events(struct oh_handler
                                 dbg("EVENT_GROUP_CHANGED -- Not processed");
                                 break;
                         case EVENT_OA_REBOOT:
-                                dbg("EVENT_OA_REBOOT -- Not processed");
+                                dbg("EVENT_OA_REBOOT");
+                                rv = process_oa_reboot_event(oh_handler, oa);
                                 break;
                         case EVENT_OA_LOGOFF_REQUEST:
                                 dbg("EVENT_OA_LOGOFF_REQUEST -- Not processed");
diff -up openhpi-2.14.1/plugins/oa_soap/oa_soap_oa_event.c.oa_failover_fix openhpi-2.14.1/plugins/oa_soap/oa_soap_oa_event.c
--- openhpi-2.14.1/plugins/oa_soap/oa_soap_oa_event.c.oa_failover_fix	2009-11-23 21:16:51.000000000 +0100
+++ openhpi-2.14.1/plugins/oa_soap/oa_soap_oa_event.c	2013-04-03 21:54:51.313641929 +0200
@@ -329,6 +329,50 @@ SaErrorT process_oa_failover_event(struc
 }
 
 /**
+ * process_oa_reboot_event
+ *      @oh_handler: Pointer to openhpi handler structure
+ *      @oa:         Pointer to the OA structure
+ *
+ * Purpose:
+ *      Gets the OA REBOOT event.
+ *      perform the rediscovery for all the resources.
+ *
+ * Detailed Description:
+ *      - OA needs some time to stabilize, after getting the OA REBOOT event,
+ *        plug-in starts checking for events after 90 seconds
+	- Establish the new connection with OA.
+ *      - Since there are high chances for missing the information of changes
+ *        in the resources, re-discovery will be done before start listening
+ *        for events.
+ * Return values:
+ *      SA_OK                     - on success.
+ *      SA_ERR_HPI_INVALID_PARAMS - on wrong parameters.
+ **/
+SaErrorT process_oa_reboot_event(struct oh_handler_state *oh_handler,
+                                   struct oa_info *oa)
+{
+	SaErrorT rv = SA_OK;
+	SaHpiInt32T sleep_time = 0;
+	dbg("\nThread id = %p \n",g_thread_self());
+
+	if (oh_handler == NULL || oa == NULL) {
+		err("Invalid parameters");
+		return SA_ERR_HPI_INVALID_PARAMS;
+	}
+	sleep_time = OA_STABILIZE_MAX_TIME;
+	dbg("Sleeping for %d seconds", sleep_time);
+	if (sleep_time > 0) {
+		sleep(sleep_time);
+	}
+    /* Call the oa_soap error handling function to re establish the connection
+     * with OA and rediscover all the resources
+     */
+	oa_soap_error_handling(oh_handler, oa);
+
+	return SA_OK;
+}
+
+/**
  * process_oa_info_event
  *      @oh_handler: Pointer to openhpi handler structure
  *      @con:        Pointer to SOAP_CON structure
diff -up openhpi-2.14.1/plugins/oa_soap/oa_soap_oa_event.h.oa_failover_fix openhpi-2.14.1/plugins/oa_soap/oa_soap_oa_event.h
--- openhpi-2.14.1/plugins/oa_soap/oa_soap_oa_event.h.oa_failover_fix	2009-11-23 21:16:51.000000000 +0100
+++ openhpi-2.14.1/plugins/oa_soap/oa_soap_oa_event.h	2013-04-03 21:54:51.313641929 +0200
@@ -44,6 +44,9 @@ SaErrorT process_oa_extraction_event(str
 SaErrorT process_oa_failover_event(struct oh_handler_state *oh_handler,
                                    struct oa_info *oa);
 
+SaErrorT process_oa_reboot_event(struct oh_handler_state *oh_handler,
+                                   struct oa_info *oa);
+
 SaErrorT process_oa_info_event(struct oh_handler_state *oh_handler,
                                SOAP_CON *con,
                                struct eventInfo *oa_event);
diff -up openhpi-2.14.1/plugins/oa_soap/oa_soap_ps_event.c.oa_failover_fix openhpi-2.14.1/plugins/oa_soap/oa_soap_ps_event.c
diff -up openhpi-2.14.1/plugins/oa_soap/oa_soap_re_discover.c.oa_failover_fix openhpi-2.14.1/plugins/oa_soap/oa_soap_re_discover.c
--- openhpi-2.14.1/plugins/oa_soap/oa_soap_re_discover.c.oa_failover_fix	2013-04-03 21:37:20.156638412 +0200
+++ openhpi-2.14.1/plugins/oa_soap/oa_soap_re_discover.c	2013-04-03 21:54:51.315644230 +0200
@@ -1071,8 +1071,9 @@ SaErrorT add_server_blade(struct oh_hand
 	convert_lower_to_upper(response.name, strlen(response.name),
 			       blade_name, MAX_NAME_LEN);
 
-        /* Build the server RPR entry */
-        rv = build_discovered_server_rpt(oh_handler, con, info, &resource_id);
+        /* Build the server RPT entry */
+        rv = build_discovered_server_rpt(oh_handler, con, &response,
+                                         &resource_id);
         if (rv != SA_OK) {
                 err("build inserted server rpt failed");
                 return rv;
